{"ast":null,"code":"import _defineProperty from \"/home/gonzalo/Desktop/machine/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/gonzalo/Desktop/machine/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport './App.css';\nconst FETCH_QUOTES = \"FETCH_QUOTES\";\nconst NEW_QUOTE = \"NEW_QUOTE\";\nconst initialState = {\n  loading: true,\n  error: false,\n  data: [],\n  randomNumber: \"\",\n  colors: [\"#16a085\", \"#27ae60\", \"#2c3e50\", \"#f39c12\", \"#e74c3c\", \"#9b59b6\", \"#FB6964\", \"#342224\", \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"]\n};\n\nfunction quotesReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_QUOTES:\n      return _objectSpread({}, state, {\n        loading: false,\n        data: action.payload\n      });\n\n    case NEW_QUOTE:\n      return _objectSpread({}, state, {\n        randomNumber: action.payload\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = Redux.combineReduers({\n  quotes: quotesReducer\n});\nconst preInitialState = {};\nconst middleware = [ReduxThunk.default];\nconst store = Redux.createStore(rootReducer, preInitialState, Redux.applyMiddleware(...middleware));\n\nconst fetchQuotes = () => dispatch => {\n  fetch(\"https://gist.githubusercontent.com/irkreja/5f35dc197c6be4ddc32a45acdd23fcd7/raw/0d9b85d4a9d9da9dc67fa0257df66ed80702ff3a/quotes.json\").then(response => {\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n\n    return response.json();\n  }).then(data => {\n    dispatch({\n      type: \"FETCH_QUOTES\",\n      payload: data.quotes\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n};\n\nconst newQuote = randomNo => {\n  return {\n    type: \"NEW_QUOTE\",\n    payload: randomNo\n  };\n};\n\nclass Loading extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"loading-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"loader-dzg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass RandomQuotes extends React.Component {\n  constructor() {\n    super();\n    this.getNewQuote = this.getnewQuote.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchQuotes();\n    this.getNewQuote();\n  }\n\n  getNewQuote() {\n    let randomQuoteIndex = Math.floor(Math.random() * 102);\n    this.props.newQuote(randomQuoteIndex);\n  }\n\n  render() {\n    if (this.props.loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      });\n    }\n\n    const _this$props$quotes$th = this.props.quotes[this.props.randomNumber],\n          quote = _this$props$quotes$th.quote,\n          autor = _this$props$quotes$th.autor;\n    const randomColor = this.props.randomColor[Math.floor(Math.random() * 11)];\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      style: {\n        backgroundColor: randomColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"quote-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quote-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-quote-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \" \"), React.createElement(\"q\", {\n      id: \"text\",\n      style: {\n        color: randomColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, quote)), React.createElement(\"div\", {\n      className: \"quote-author\",\n      style: {\n        color: randomColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"-\", React.createElement(\"span\", {\n      id: \"author\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \" \", author)), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: 'TWEEThttps://twitter.com/intent/tweet?hashtags=quotes,freecodecamp&related=freecodecamp&text=\"' + quote + '\" %0D%0A- ' + author + \"%0D%0A\",\n      className: \"button\",\n      id: \"tweet-quote\",\n      title: \"Tweet this quote!\",\n      target: \"_blank\",\n      style: {\n        backgroundColor: randomColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"TWEET\"), React.createElement(\"button\", {\n      className: \"button\",\n      id: \"new-quote\",\n      onClick: this.getNewQuote,\n      style: {\n        backgroundColor: randomColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"NEW QUOTE\"))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  quotes: state.quotes.data,\n  randomNumber: state.quotes.randomNumber,\n  loading: state.quotes.loading,\n  randomColor: state.quotes.colors\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return Redux.bindActionCreators({\n    fetchQuotes,\n    newQuote\n  }, dispatch);\n}\n\nconst RandomQuotesContainer = ReactRedux.connect(mapStateToProps, mapDispatchToProps)(RandomQuotes);\n\nclass App extends React.Component {\n  render() {\n    return React.createElement(ReactRedux.Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(RandomQuotesContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 192\n  },\n  __self: this\n}), document.getElementById(\"root\"));\nexport default App;","map":{"version":3,"sources":["/home/gonzalo/Desktop/machine/src/App.js"],"names":["FETCH_QUOTES","NEW_QUOTE","initialState","loading","error","data","randomNumber","colors","quotesReducer","state","action","type","payload","rootReducer","Redux","combineReduers","quotes","preInitialState","middleware","ReduxThunk","default","store","createStore","applyMiddleware","fetchQuotes","dispatch","fetch","then","response","ok","Error","statusText","json","catch","console","log","newQuote","randomNo","Loading","React","Component","render","RandomQuotes","constructor","getNewQuote","getnewQuote","bind","componentDidMount","props","randomQuoteIndex","Math","floor","random","quote","autor","randomColor","backgroundColor","color","author","mapStateToProps","mapDispatchToProps","bindActionCreators","RandomQuotesContainer","ReactRedux","connect","App","ReactDOM","document","getElementById"],"mappings":"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","sourcesContent":["import './App.css';\n\nconst FETCH_QUOTES = \"FETCH_QUOTES\";\nconst NEW_QUOTE = \"NEW_QUOTE\";\n\nconst initialState = {\n  loading: true,\n  error: false,\n  data: [],\n  randomNumber: \"\",\n  colors: [\n    \"#16a085\",\n    \"#27ae60\",\n    \"#2c3e50\",\n    \"#f39c12\",\n    \"#e74c3c\",\n    \"#9b59b6\",\n    \"#FB6964\",\n    \"#342224\",\n    \"#472E32\",\n    \"#BDBB99\",\n    \"#77B1A9\",\n    \"#73A857\"\n  ]\n};\n\n\nfunction quotesReducer(state = initialState, action) {\n    switch (action.type) {\n        case FETCH_QUOTES:\n            return {\n                ...state,\n                loading: false,\n                data:action.payload\n            };\n        case NEW_QUOTE:\n            return {\n                ...state,\n                randomNumber: action.payload\n            };\n         default:\n             return state;   \n    }\n}\n\n  const rootReducer = Redux.combineReduers({\n    quotes: quotesReducer\n});\n\nconst preInitialState = {};\n\nconst middleware = [ReduxThunk.default];\n\nconst store = Redux.createStore(\n    rootReducer,\n    preInitialState,   \n    Redux.applyMiddleware(...middleware)\n);\n\nconst fetchQuotes = () => dispatch => {\n    fetch(\n        \"https://gist.githubusercontent.com/irkreja/5f35dc197c6be4ddc32a45acdd23fcd7/raw/0d9b85d4a9d9da9dc67fa0257df66ed80702ff3a/quotes.json\"\n    )\n    .then (response => {\n        if(!response.ok) {\n            throw Error(response.statusText);\n        }\n        return response.json();\n    })\n    .then(data => {\n        dispatch({ type: \"FETCH_QUOTES\", payload: data.quotes});\n    })\n    .catch(error => {\n        console.log(error);\n    });\n};\n\nconst newQuote = randomNo => {\n    return {\n        type: \"NEW_QUOTE\",\n        payload: randomNo\n    };\n};\n\nclass Loading extends React.Component {\n    render() {\n        return (\n            <div className=\"loading-container\">\n                <div className=\"loader-dzg\" />\n            </div>\n        );\n    }\n}\n\nclass RandomQuotes extends React.Component {\n    constructor() {\n        super();\n        this.getNewQuote = this.getnewQuote.bind(this);\n    }\n    componentDidMount() {\n        this.props.fetchQuotes();\n        this.getNewQuote();\n    }\n    \n    getNewQuote() {\n        let randomQuoteIndex = Math.floor(Math.random() * 102);\n        this.props.newQuote(randomQuoteIndex);\n    }\n    render() {\n        if (this.props.loading) {\n            return <Loading />;\n        }\n        const {quote, autor } = this.props.quotes[this.props.randomNumber];\n        const randomColor = this.props.randomColor[Math.floor(Math.random() * 11)];\n        return (\n            <div className=\"wrapper\" style={{ backgroundColor: randomColor }}>\n            <div id=\"quote-box\">\n              <div className=\"quote-text\">\n                <i className=\"fa fa-quote-left\"> </i>\n                <q id=\"text\" style={{ color: randomColor }}>\n                  {quote}\n                </q>\n              </div>\n              <div className=\"quote-author\" style={{ color: randomColor }}>\n                -\n                <span id=\"author\"> {author}</span>\n              </div>\n              <div className=\"buttons\">\n                <a\n                  href={\n                    'TWEEThttps://twitter.com/intent/tweet?hashtags=quotes,freecodecamp&related=freecodecamp&text=\"' +\n                    quote +\n                    '\" %0D%0A- ' +\n                    author +\n                    \"%0D%0A\"\n                  }\n                  className=\"button\"\n                  id=\"tweet-quote\"\n                  title=\"Tweet this quote!\"\n                  target=\"_blank\"\n                  style={{ backgroundColor: randomColor }}\n                >\n                  TWEET\n                </a>\n                <button\n                  className=\"button\"\n                  id=\"new-quote\"\n                  onClick={this.getNewQuote}\n                  style={{ backgroundColor: randomColor }}\n                >\n                  NEW QUOTE\n                </button>\n              </div>\n            </div>\n          </div>\n        );\n      }\n    }\n\nconst mapStateToProps = state => ({\n        quotes: state.quotes.data,\n        randomNumber: state.quotes.randomNumber,\n        loading: state.quotes.loading,\n        randomColor: state.quotes.colors\n});\n\nfunction mapDispatchToProps(dispatch) {\n    return Redux.bindActionCreators(\n        {\n            fetchQuotes,\n            newQuote\n        },\n        dispatch\n    );\n}\n\nconst RandomQuotesContainer = ReactRedux.connect (\n    mapStateToProps,\n    mapDispatchToProps\n)(RandomQuotes);\n\nclass App extends React.Component {\n    render() {\n        return (\n            <ReactRedux.Provider store={store}>\n            <RandomQuotesContainer />\n          </ReactRedux.Provider>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nexport default App;"]},"metadata":{},"sourceType":"module"}